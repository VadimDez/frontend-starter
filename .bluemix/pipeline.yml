---
stages:
- name: Build Stage
  inputs:
  - type: git
    branch: master
    service: ${REPO}
  triggers:
  - type: git
    events: '{"push":true,"pull_request":false,"pull_request_closed":false}'
  jobs:
  - name: Build
    type: builder
    artifact_dir: ''
    build_type: shell
    script: |-
      #!/bin/bash
      if  [[ -f post_build.sh ]]; then
        chmod +x post_build.sh;
        echo "executing the post_build script";
        sh post_build.sh;
      else
        echo "the post_build script does not exist";
      fi
- name: Test Stage
  inputs:
  - type: job
    stage: BUILD
    job: Build
    dir_name: null
  triggers:
  - type: stage
  permission:
    execute: TOOLCHAIN_ADMINS
  jobs:
  - name: Test
    type: tester
    curatedDockerImage: default
    script: |-
      apt-get update
      apt-get install gconf-service libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxss1 libxtst6 libappindicator1 libnss3 libasound2 libatk1.0-0 libc6 ca-certificates fonts-liberation lsb-release xdg-utils wget -y
      npm test
    test_type: customimage
    docker_image: node:10
- name: Deploy Stage
  inputs:
  - type: job
    stage: Build Stage
    job: Build
  triggers:
  - type: stage
  jobs:
  - name: Deploy
    type: deployer
    target:
      region_id: ${REGION_ID}
      organization: ${CF_ORGANIZATION}
      space: ${CF_SPACE}
      application: ${CF_APP}
      api_key: ${API_KEY}
    script: |-
      #!/bin/bash
      cf push "${CF_APP}"
      # cf logs "${CF_APP}" --recent
